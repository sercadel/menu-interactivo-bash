#!/bin/bash
# Menu shell script | ISOP v0.15a

# Establecer variables
LSB=/usr/bin/lsb_release

# Mensaje de pause - continuar
function pause(){
	local message="$@"
	[ -z $message ] && message=`printf "\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPor favor, Pulse la tecla [Enter] para continuar..."`
	read -p "$message" readEnterKey
}

# Mostrar el menú
function show_menu(){
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "   `date +'%a | %d %B %Y | %X'`"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	printf
	echo "Hola $USER, Bienvenido a ISOP Tools"
	echo ""
	echo "======================================="
	echo "||      NFORMACION DEL SISTEMA       ||"
	echo "======================================="
	echo ""
	echo "   1. Información del S.O."
	echo "   2. Información del Hostname y dns"
	echo "   3. Información de red"
	echo "   4. Usuarios conectados"
	echo "   5. Ultimos usuarios conectados"
	echo "   6. Información de la memoria"
	echo "   7. Actualizar los repositorios"
	echo "   8. Actualizar el sistema"
	echo "   9. Crear usuarios"
	echo "  10. Salir"
	echo ""
}

# Muestra Decoración del encabezado
function write_header(){
	local h="$@"
	echo ""
	echo "---------------------------------------------------------------"
	echo "   ${h}"
	echo "---------------------------------------------------------------"
	echo ""
}

# Obtiene información del sistema
function os_info(){
	write_header " Información del Sistema"
	echo "Sistema operativo : $(uname -mrs)" #Kernel-Versión Kernel-Arquitectura
	[ -x $LSB ] && $LSB -a || echo "El comando $LSB no esta instalado (set \$LSB variable)"
	pause
}

# Obtiene información del hostname, DNS, IP's
function host_info(){
	local dnsips=$(sed -e '/^$/d' /etc/resolv.conf | awk '{if (tolower($1)=="nameserver") print $2}')
	write_header " Hostname y DNS "
	echo "Hostname : $(hostname -s)"
	echo "`nmcli device show | grep IP4.DNS`"
	echo "Fully qualified domain name : $(hostname -f)"
	echo "Dirección de red (IP) :  $(hostname -i)"
	echo "Servidores DNS (IP DNS) : ${dnsips}"
	pause
}

# Obtiene información de las inferfaces de red y enrutamiento
function net_info(){
	devices=$(netstat -i | cut -d" " -f1 | egrep -v "^Kernel|Iface|lo")
	write_header " Información de red "
	echo "Número total de interfaces encontradas : $(wc -w <<<${devices})"

	echo ""
	echo "********************************************"
	echo "**      Información de dirección IP       **"
	echo "********************************************"
	echo ""
	ip -4 address show

	printf "\n\n" # Salto de dos líneas
	echo "********************************************"
	echo "**         Tabla de enrutamiento          **"
	echo "********************************************"
	echo ""
	netstat -nr

	printf "\n\n" # Salto de dos líneas
	echo "********************************************"
	echo "**          Tabla de interfaces           **"
	echo "********************************************"
	echo ""
	netstat -i
	pause
}

# Muestra la lista de los usuarios conectados
# Muestra la lista de los ultimos usuarios que han iniciado sesión
function user_info(){
	local cmd="$1"
	case "$cmd" in
		who) write_header "   Usuarios conectados "; who -H;
		pause ;;
		last) write_header "   Lista de los ultimos usuarios conectados "; last ;
		pause ;;
	esac
}

# Muestra la información de la Memoria en uso y disponible
function mem_info(){
	write_header " Memoria en uso y disponible "
	free -m

	echo ""
	echo "********************************************"
	echo "**   Estadisticas de la memoria virtual   **"
	echo "********************************************"
	echo ""
	vmstat
	echo ""
	echo "********************************************"
	echo "**   Procesos con mayor uso de memoria    **"
	echo "********************************************"
	echo ""
	ps auxf | sort -nr -k 4 | head -5
	pause
}

# Actualiza los repositorios
function repo_upda(){
	write_header " Actualizar los repositorios "
	sudo apt-get update
	pause
}

# Actualiza el sistema
function sys_upgra(){
	write_header " Actualizar el sistema "
	sudo apt-get upgrade
	pause
}

# Crear usuarios
# Script para añadir un usuario al sistema
function user_create(){
	read -p "Introduzca un nombre de usuario : " username
	read -p "Introduzca el grupo al que pertenece : " group
	read -s -p "Introduzca una contraseña : " password
		
	egrep "^$username" /etc/passwd >/dev/null # Comprueba si existe un usuario con el mismo nombre
		if [ $? -eq 0 ]; then 
		printf "\012\012Ya hay un usuario con el nombre $username."
	else # Crea el usuario
		pass=$(perl -e 'print crypt($ARGV[0], "password")' $password)
		sudo useradd -m -p $pass $username $group
		[ $? -eq 0 ] && printf "\012\012Se ha agregado el usuario al sistema." || printf "\n No se pudo agregar el usuario al sistema."
	fi
	pause
}

# Introdución de opciones del menú
function read_input(){
	local c
	read -p "Elige una opción [ 1 - 10 ] " c
			echo ""
	case $c in
		1)	os_info ;;
		2)	host_info ;;
		3)	net_info ;;
		4)	user_info "who" ;;
		5)	user_info "last" ;;
		6)	mem_info ;;
		7)	repo_upda ;;
		8)	sys_upgra ;;
		9)	user_create ;;
		10)	clear && printfn\n$USER, que tenga un buen día. ¡Adios!\n\n"; exit 0 ;;
		*)	printf "\nPor favor, elige un número entre 1 y 10.\n"
			pause
	esac
}

# ignora las teclas CTRL+C, CTRL+Z y ESC
trap '' SIGINT SIGQUIT SIGTSTP

# Bucle
while true
do
	clear
 	show_menu	# Muestra el menú
 	read_input	# espera a la respuesta del usuario
done